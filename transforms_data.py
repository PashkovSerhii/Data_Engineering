import pandas as pd
import mysql.connector
from mysql.connector import Error


class AdTechDataTransformer:
    def __init__(self, connection_config):
        self.config = connection_config
        self.connection = None

    def connect_db(self):
        """–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MySQL"""
        try:
            self.connection = mysql.connector.connect(**self.config)
            print("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MySQL —É—Å–ø—ñ—à–Ω–µ")
        except Error as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {e}")

    def load_csv_data(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è CSV —Ñ–∞–π–ª—ñ–≤"""
        print("üìÇ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è CSV —Ñ–∞–π–ª—ñ–≤...")
        # self.ad_events = pd.read_csv('data/raw/ad_events.csv')
        columns = [
            'EventID', 'AdvertiserName', 'CampaignName', 'CampaignStartDate', 'CampaignEndDate',
            'TargetingCriteria1', 'TargetingCriteria2', 'TargetingCriteria3',
            'AdSlotSize', 'UserID', 'Device', 'Location', 'Timestamp',
            'BidAmount', 'AdCost', 'WasClicked', 'ClickTimestamp',
            'AdRevenue', 'Budget', 'RemainingBudget'
        ]

        # –ó—á–∏—Ç—É—î–º–æ CSV –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
        ad_events = pd.read_csv('data/raw/ad_events.csv', names=columns, header=None)

        # –û–±'—î–¥–Ω—É—î–º–æ —Ç—Ä–∏ —á–∞—Å—Ç–∏–Ω–∏ TargetingCriteria –≤ –æ–¥–∏–Ω —Å—Ç–æ–≤–ø–µ—Ü—å
        ad_events['TargetingCriteria'] = ad_events[
            ['TargetingCriteria1', 'TargetingCriteria2', 'TargetingCriteria3']].apply(
            lambda row: ', '.join(row.astype(str)).strip(), axis=1
        )

        # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ –∫–æ–ª–æ–Ω–∫–∏
        self.ad_events = ad_events.drop(['TargetingCriteria1', 'TargetingCriteria2', 'TargetingCriteria3'], axis=1)
        self.campaigns = pd.read_csv('data/raw/campaigns.csv')
        self.users = pd.read_csv('data/raw/users.csv')
        print(
            f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {len(self.ad_events)} –ø–æ–¥—ñ–π, {len(self.campaigns)} –∫–∞–º–ø–∞–Ω—ñ–π, {len(self.users)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")

    def clear_existing_data(self):
        """–û—á–∏—â–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö –¥–∞–Ω–∏—Ö (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)"""
        cursor = self.connection.cursor()
        try:
            # –í–∏–¥–∞–ª—è—î–º–æ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É (–∑–≤–æ—Ä–æ—Ç–Ω–æ –¥–æ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π)
            cursor.execute("DELETE FROM clicks")
            cursor.execute("DELETE FROM ad_events")
            cursor.execute("DELETE FROM user_interests")
            cursor.execute("DELETE FROM users")
            cursor.execute("DELETE FROM campaigns")
            cursor.execute("DELETE FROM advertisers")

            # –°–∫–∏–¥–∞—î–º–æ AUTO_INCREMENT
            cursor.execute("ALTER TABLE advertisers AUTO_INCREMENT = 1")
            cursor.execute("ALTER TABLE campaigns AUTO_INCREMENT = 1")
            cursor.execute("ALTER TABLE clicks AUTO_INCREMENT = 1")

            self.connection.commit()
            print("üßπ –Ü—Å–Ω—É—é—á—ñ –¥–∞–Ω—ñ –æ—á–∏—â–µ–Ω–æ")
        except Error as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ: {e}")
            self.connection.rollback()
        finally:
            cursor.close()

    def get_or_create_advertiser_mapping(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞–ø—ñ–Ω–≥—É —Ä–µ–∫–ª–∞–º–æ–¥–∞–≤—Ü—ñ–≤"""
        cursor = self.connection.cursor()
        advertiser_mapping = {}

        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å–Ω—É—é—á–∏—Ö —Ä–µ–∫–ª–∞–º–æ–¥–∞–≤—Ü—ñ–≤
            cursor.execute("SELECT advertiser_id, advertiser_name FROM advertisers")
            existing_advertisers = cursor.fetchall()

            for adv_id, adv_name in existing_advertisers:
                advertiser_mapping[adv_name] = adv_id

            # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏—Ö —Ä–µ–∫–ª–∞–º–æ–¥–∞–≤—Ü—ñ–≤
            unique_advertisers = self.campaigns['AdvertiserName'].unique()

            for advertiser_name in unique_advertisers:
                if advertiser_name not in advertiser_mapping:
                    try:
                        cursor.execute(
                            "INSERT INTO advertisers (advertiser_name) VALUES (%s)",
                            (advertiser_name,)
                        )
                        advertiser_mapping[advertiser_name] = cursor.lastrowid
                    except Error as e:
                        if e.errno == 1062:  # Duplicate entry
                            # –Ø–∫—â–æ –¥—É–±–ª—ñ–∫–∞—Ç, –æ—Ç—Ä–∏–º—É—î–º–æ —ñ—Å–Ω—É—é—á–∏–π ID
                            cursor.execute(
                                "SELECT advertiser_id FROM advertisers WHERE advertiser_name = %s",
                                (advertiser_name,)
                            )
                            result = cursor.fetchone()
                            if result:
                                advertiser_mapping[advertiser_name] = result[0]
                        else:
                            raise e

            self.connection.commit()
            print(f"‚úÖ –û–±—Ä–æ–±–ª–µ–Ω–æ {len(advertiser_mapping)} —Ä–µ–∫–ª–∞–º–æ–¥–∞–≤—Ü—ñ–≤")
            return advertiser_mapping

        except Error as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑ —Ä–µ–∫–ª–∞–º–æ–¥–∞–≤—Ü—è–º–∏: {e}")
            self.connection.rollback()
            return {}
        finally:
            cursor.close()

    def transform_campaigns(self, advertiser_mapping):
        """–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—è –∫–∞–º–ø–∞–Ω—ñ–π –∑ ID —Ä–µ–∫–ª–∞–º–æ–¥–∞–≤—Ü—ñ–≤"""
        campaigns_transformed = self.campaigns.copy()
        campaigns_transformed['advertiser_id'] = campaigns_transformed['AdvertiserName'].map(advertiser_mapping)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—Å—ñ —Ä–µ–∫–ª–∞–º–æ–¥–∞–≤—Ü—ñ –∑–Ω–∞–π–¥–µ–Ω—ñ
        missing_advertisers = campaigns_transformed[campaigns_transformed['advertiser_id'].isna()]
        if not missing_advertisers.empty:
            print(f"‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ advertiser_id –¥–ª—è: {missing_advertisers['AdvertiserName'].unique()}")

        return campaigns_transformed[['CampaignID', 'advertiser_id', 'CampaignName',
                                      'CampaignStartDate', 'CampaignEndDate',
                                      'TargetingCriteria', 'AdSlotSize', 'Budget', 'RemainingBudget']].dropna()

    def transform_users_and_interests(self):
        """–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ —ó—Ö —ñ–Ω—Ç–µ—Ä–µ—Å—ñ–≤"""
        users_clean = self.users[['UserID', 'Age', 'Gender', 'Location', 'SignupDate']].copy()

        # –û–±—Ä–æ–±–∫–∞ —ñ–Ω—Ç–µ—Ä–µ—Å—ñ–≤
        interests_data = []
        for _, row in self.users.iterrows():
            user_id = row['UserID']
            interests = str(row['Interests']).split(',')
            for interest in interests:
                interest = interest.strip()
                if interest and interest != 'nan':
                    interests_data.append({'user_id': user_id, 'interest': interest})

        interests_df = pd.DataFrame(interests_data)
        return users_clean, interests_df

    def transform_ad_events_and_clicks(self):
        """–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø–æ–¥—ñ–π —Ç–∞ –∫–ª—ñ–∫—ñ–≤"""
        # –°—Ç–≤–æ—Ä—é—î–º–æ –º–∞–ø—ñ–Ω–≥ –Ω–∞–∑–≤ –∫–∞–º–ø–∞–Ω—ñ–π –¥–æ ID
        campaign_mapping = dict(zip(self.campaigns['CampaignName'], self.campaigns['CampaignID']))

        events_clean = self.ad_events.copy()
        events_clean['campaign_id'] = events_clean['CampaignName'].map(campaign_mapping)

        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–¥—ñ—ó –±–µ–∑ campaign_id
        events_clean = events_clean.dropna(subset=['campaign_id'])

        # –†–æ–∑–¥—ñ–ª—è—î–º–æ –Ω–∞ –ø–æ–¥—ñ—ó —Ç–∞ –∫–ª—ñ–∫–∏
        ad_events_final = events_clean[['EventID', 'campaign_id', 'UserID', 'Device',
                                        'Location', 'Timestamp', 'BidAmount', 'AdCost', 'AdRevenue']].copy()

        # –¢—ñ–ª—å–∫–∏ –∫–ª—ñ–∫–∏
        clicks_data = events_clean[events_clean['WasClicked'] == True][['EventID', 'ClickTimestamp']].copy()
        clicks_data = clicks_data.dropna(subset=['ClickTimestamp'])

        return ad_events_final, clicks_data

    def insert_data_batch(self, cursor, query, data, batch_size=1000):
        """–ü–∞–∫–µ—Ç–Ω–∞ –≤—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–∏—Ö"""
        for i in range(0, len(data), batch_size):
            batch = data[i:i + batch_size]
            try:
                cursor.executemany(query, batch)
                self.connection.commit()
            except Error as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –ø–∞–∫–µ—Ç—ñ {i // batch_size + 1}: {e}")
                self.connection.rollback()
                # –°–ø—Ä–æ–±—É—î–º–æ –≤—Å—Ç–∞–≤–∏—Ç–∏ –ø–æ –æ–¥–Ω–æ–º—É –∑–∞–ø–∏—Å—É
                for row in batch:
                    try:
                        cursor.execute(query, row)
                        self.connection.commit()
                    except Error as row_error:
                        print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–ø–∏—Å: {row_error}")
                        self.connection.rollback()
                        continue

    def insert_data_to_db(self):
        """–í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–æ –±–∞–∑–∏"""
        cursor = self.connection.cursor()

        try:
            # 1. –†–µ–∫–ª–∞–º–æ–¥–∞–≤—Ü—ñ (–∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤)
            advertiser_mapping = self.get_or_create_advertiser_mapping()

            # 2. –ö–∞–º–ø–∞–Ω—ñ—ó
            campaigns_transformed = self.transform_campaigns(advertiser_mapping)
            campaign_data = [tuple(row) for _, row in campaigns_transformed.iterrows()]

            self.insert_data_batch(cursor, """
                INSERT IGNORE INTO campaigns (campaign_id, advertiser_id, campaign_name, 
                                     start_date, end_date, targeting_criteria, 
                                     ad_slot_size, budget, remaining_budget)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
            """, campaign_data)
            print(f"‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ {len(campaigns_transformed)} –∫–∞–º–ø–∞–Ω—ñ–π")

            # 3. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
            users_clean, interests_df = self.transform_users_and_interests()
            user_data = [tuple(row) for _, row in users_clean.iterrows()]

            self.insert_data_batch(cursor, """
                INSERT IGNORE INTO users (user_id, age, gender, location, signup_date)
                VALUES (%s, %s, %s, %s, %s)
            """, user_data)
            print(f"‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ {len(users_clean)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")

            # 4. –Ü–Ω—Ç–µ—Ä–µ—Å–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            if not interests_df.empty:
                interest_data = [(row['user_id'], row['interest']) for _, row in interests_df.iterrows()]
                self.insert_data_batch(cursor, """
                    INSERT IGNORE INTO user_interests (user_id, interest) VALUES (%s, %s)
                """, interest_data)
                print(f"‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ {len(interests_df)} —ñ–Ω—Ç–µ—Ä–µ—Å—ñ–≤")

            # 5. –†–µ–∫–ª–∞–º–Ω—ñ –ø–æ–¥—ñ—ó
            ad_events_final, clicks_data = self.transform_ad_events_and_clicks()
            event_data = [tuple(row) for _, row in ad_events_final.iterrows()]

            self.insert_data_batch(cursor, """
                INSERT IGNORE INTO ad_events (event_id, campaign_id, user_id, device, 
                                     location, timestamp, bid_amount, ad_cost, ad_revenue)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
            """, event_data)
            print(f"‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ {len(ad_events_final)} —Ä–µ–∫–ª–∞–º–Ω–∏—Ö –ø–æ–¥—ñ–π")

            # 6. –ö–ª—ñ–∫–∏
            if not clicks_data.empty:
                click_data = [(row['EventID'], row['ClickTimestamp']) for _, row in clicks_data.iterrows()]
                self.insert_data_batch(cursor, """
                    INSERT IGNORE INTO clicks (event_id, click_timestamp) VALUES (%s, %s)
                """, click_data)
                print(f"‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ {len(clicks_data)} –∫–ª—ñ–∫—ñ–≤")

            print("üéâ –í—Å—ñ –¥–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ñ!")

        except Error as e:
            print(f"‚ùå –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤—Ü—ñ: {e}")
            self.connection.rollback()
        finally:
            cursor.close()

    def run_full_import(self, clear_data=False):
        """–ü–æ–≤–Ω–∏–π —ñ–º–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö"""
        try:
            self.connect_db()
            if not self.connection:
                return

            self.load_csv_data()

            if clear_data:
                self.clear_existing_data()

            self.insert_data_to_db()

        finally:
            if self.connection:
                self.connection.close()
                print("üîå –ó'—î–¥–Ω–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ")


# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
config = {
    'host': 'mysql',
    'port': 3306,
    'database': 'adtech_db',
    'user': 'adtech_user',
    'password': 'adtech_pass'
}

# # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
# if __name__ == "__main__":
transformer = AdTechDataTransformer(config)

# –ó–∞–ø—É—Å–∫ –∑ –æ—á–∏—â–µ–Ω–Ω—è–º –¥–∞–Ω–∏—Ö (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
transformer.run_full_import(clear_data=True)  # True –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö –¥–∞–Ω–∏—Ö

# –ê–±–æ –±–µ–∑ –æ—á–∏—â–µ–Ω–Ω—è (–¥–∞–Ω—ñ –¥–æ–¥–∞–¥—É—Ç—å—Å—è –¥–æ —ñ—Å–Ω—É—é—á–∏—Ö)
# transformer.run_full_import(clear_data=False)